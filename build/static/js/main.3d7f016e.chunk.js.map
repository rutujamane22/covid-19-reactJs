{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","console","log","Card","onClick","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","background","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","SetMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","onChange","variant","MenuItem","e","todayCases","todayRecovered","todayDeaths","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d7f016e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./InfoBox.css\";\r\nimport { Typography, Card, CardContent } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        {/*title*/}\r\n        <Typography color=\"textSecondary\">{title}</Typography>\r\n        {/*cases*/}\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total}\r\n        </Typography>\r\n        {/*total*/}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport \"./util.css\";\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n\r\n  // or one line function\r\n  // return sortedData.sort((a,b) => (a.cases > b.cases) ? -1 : 1);\r\n};\r\n\r\n//circle dictionary\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000\r\n  }\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draws circle on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info_container\">\r\n          <div\r\n            className=\"info_flag\"\r\n            style={{ background: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info_name\">{country.country}</div>\r\n          <div className=\"info_confirmed\">\r\n            Cases:{numeral(country.cases).format(\"0.0\")}\r\n          </div>\r\n          <div className=\"info_recovered\">\r\n            Recovered:{numeral(country.recovered).format(\"0.0\")}\r\n          </div>\r\n          <div className=\"info_deaths\">\r\n            Deaths:{numeral(country.deaths).format(\"0.0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {/* loop thru the countries and draw circles on the screen*/}\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>{numeral(cases).format(\"0,0\")}</td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n// import \"./Li.css\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0\r\n    }\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      }\r\n    }\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\"\r\n        }\r\n      }\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  //last 120 days data\r\n  //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          //do clever stuff with fetched data here\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\"\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat } from \"./util\";\n\n//https://disease.sh/v3/covid-19/countries\n\nexport default function App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, SetMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => setCountryInfo(data));\n  }, []);\n\n  //fetching all the countries\n  useEffect(() => {\n    // async --> send a request , wait for it , do something with it\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          SetMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    //https://disease.sh/v3/covid-19/countries/{COUNTRY_CODE} eg:Ind , usa\n    //https://disease.sh/v3/covid-19/all\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        //all of the data from the country response\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              onChange={onCountryChange}\n              variant=\"outlined\"\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              {/* <MenuItem value=\"india\">india</MenuItem>\n            <MenuItem value=\"123\">123</MenuItem>\n            <MenuItem value=\"cdse\">cdse</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/*Header*/}\n        {/*Title + select input dropdown field*/}\n        <div className=\"app__stats\">\n          {/*InfoBox*/}\n          {/*InfoBox*/}\n          {/*InfoBox*/}\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recoveries\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          {/*Table*/}\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">WorldWide new {casesType}</h3>\n          {/*Graph*/}\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}